# This is a basic workflow to help you get started with Actions
name: Compile module

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "compile"
  compile:
    name: Compile on ${{ matrix.os }} for nginx ${{ matrix.nginx_version }}
    runs-on: ${{ matrix.os }}
    env:
      ffmpeg_version: 4.2.3
      pcre_version: 8.44
      zlib_version: 1.2.11
      module_version: 1.26
    strategy:
      matrix:
        nginx_version: ['1.18.0', '1.19.0']
        # The type of runner that the job will run on
        os: [ubuntu-latest, ubuntu-16.04]
   

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Grab ffmpeg source, from cache if possible, or from web
    - name: Grab ffmpeg-${{ env.ffmpeg_version }} cache
      uses: actions/cache@v2
      id: cache-ffmpeg
      with:
        path: ffmpeg-${{ env.ffmpeg_version }}
        key: ffmpeg-${{ env.ffmpeg_version }}

    - name: Download ffmpeg
      if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}
        wget https://ffmpeg.org/releases/ffmpeg-${{ env.ffmpeg_version }}.tar.gz
        tar -xzvf ffmpeg-${{ env.ffmpeg_version }}.tar.gz

    # Grab nginx source, from cache if possible, or from web
    - name: Grab nginx-${{ matrix.nginx_version }} cache
      uses: actions/cache@v2
      id: cache-nginx
      with:
        path: nginx-${{ matrix.nginx_version }}
        key: nginx-${{ matrix.nginx_version }}
    
    - name: Download nginx
      if: steps.cache-nginx.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}
        wget https://nginx.org/download/nginx-${{ matrix.nginx_version }}.tar.gz
        tar -xzvf nginx-${{ matrix.nginx_version }}.tar.gz

    # Grab nginx-vod-module source, from cache if possible, or from web
    - name: Grab nginx-vod-module-${{ env.module_version }} cache
      uses: actions/cache@v2
      id: cache-nginx-vod-module
      with:
        path: nginx-vod-module-${{ env.module_version }}
        key: nginx-vod-module-${{ env.module_version }}
    
    - name: Download nginx-vod-module
      if: steps.cache-nginx-vod-module.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}
        wget https://github.com/kaltura/nginx-vod-module/archive/${{ env.module_version }}.tar.gz
        tar -xzvf ${{ env.module_version }}.tar.gz
      
    # Grab pcre module
    - name: Grab pcre-${{ env.pcre_version }} cache
      uses: actions/cache@v2
      id: cache-pcre
      with:
        path: pcre-${{ env.pcre_version }}
        key: pcre-${{ env.pcre_version }}
    
    - name: Download pcre
      if: steps.cache-pcre.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}
        wget https://ftp.pcre.org/pub/pcre/pcre-${{ env.pcre_version }}.tar.gz
        tar -xzvf pcre-${{ env.pcre_version }}.tar.gz
        
    - name: Grab zlib-${{ env.zlib_version }} cache
      uses: actions/cache@v2
      id: cache-zlib
      with:
        path: zlib-${{ env.zlib_version }}
        key: zlib-${{ env.zlib_version }}
  
    - name: Download zlib
      if: steps.cache-zlib.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}
        wget https://www.zlib.net/zlib-${{ env.zlib_version }}.tar.gz
        tar -xzvf zlib-${{ env.zlib_version }}.tar.gz
        
    # Grab prebuilts from apt
    - name: Install dependencies with apt
      run: |
        sudo apt-get -y install \
        gcc make yasm pkg-config libxml2-dev \
        autoconf \
        automake \
        build-essential \
        cmake \
        libass-dev \
        libfreetype6-dev \
        libgnutls28-dev \
        libsdl2-dev \
        libtool \
        libva-dev \
        libvdpau-dev \
        libvorbis-dev \
        libxcb1-dev \
        libxcb-shm0-dev \
        libxcb-xfixes0-dev \
        pkg-config \
        texinfo \
        wget \
        yasm \
        zlib1g-dev \
        nasm \
        libopus-dev \
        libmp3lame-dev \
        libfdk-aac-dev \
        libvpx-dev \
        libnuma-dev

    # Grab pcre module
    - name: Grab ffmpeg-${{ env.ffmpeg_version }} cache
      uses: actions/cache@v2
      id: cache-ffmpeg-built
      with:
        path: ffmpeg-build-${{ env.ffmpeg_version }}
        key: ffmpeg-build-${{ env.ffmpeg_version }}

    # Compile ffmpeg (since it is required for libavcodec and libavfilter)
    - name: Compile ffmpeg
      if: steps.cache-ffmpeg-built.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}/ffmpeg-${{ env.ffmpeg_version }}
        ./configure \
        --enable-shared \
        --enable-gpl \
        --enable-nonfree \
        --extra-cflags='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security ' \
        --extra-ldflags='-Wl,-z,relro' \
        --incdir=${{ github.workspace }}/ffmpeg-build-${{ env.ffmpeg_version }}/inc \
        --libdir=${{ github.workspace }}/ffmpeg-build-${{ env.ffmpeg_version }}/lib \
        --bindir=${{ github.workspace }}/ffmpeg-build-${{ env.ffmpeg_version }}/bin \
        --target-path=${{ github.workspace }}/ffmpeg-build-${{ env.ffmpeg_version }}/target \
        make
        export LD_LIBRARY_PATH=/usr/local/lib
        export LIBRARY_PATH=/usr/local/lib
        export C_INCLUDE_PATH=/usr/local/include

    - name: clone ffmpeg library
      run: |
        sudo cp ${{ github.workspace }}/ffmpeg-build-${{ env.ffmpeg_version }}/inc/* /usr/local/include
        sudo cp ${{ github.workspace }}/ffmpeg-build-${{ env.ffmpeg_version }}/lib/* /usr/local/lib
        sudo cp ${{ github.workspace }}/ffmpeg-build-${{ env.ffmpeg_version }}/bin/* /usr/local/bin

    - name: Compile dynamic module
      run: |
        cd ${{ github.workspace }}/nginx-${{ matrix.nginx_version }}
        ./configure --with-compat --add-dynamic-module=${{ github.workspace }}/nginx-vod-module-${{ env.module_version }}/ \
        --with-pcre=${{ github.workspace }}/pcre-${{ env.pcre_version }} \
        --with-zlib=${{ github.workspace }}/zlib-${{ env.zlib_version }}
        make modules
        ls -l ${{ github.workspace }}/nginx-${{ matrix.nginx_version }}/objs

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: nginx-vod-module-nginx-${{ matrix.nginx_version }}-${{ matrix.os }}
        # A file, directory or wildcard pattern that describes what to upload
        path: |
          ${{ github.workspace }}/nginx-${{ matrix.nginx_version }}/objs/