# This is a basic workflow to help you get started with Actions
name: Compile module

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "compile"
  compile:
    name: Compile on ${{ matrix.os }} for nginx ${{ matrix.nginx_version }}
    runs-on: ${{ matrix.os }}
    env:
      module_version: 1.29
    strategy:
      matrix:
        # Only support the lastest stable version, and two legacy versions.
        nginx_version: ['1.20.2', '1.19.0', '1.18.0']
        # The type of runner that the job will run on
        os: [ubuntu-20.04, ubuntu-18.04]
   
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Grab nginx source, from cache if possible, or from web
    - name: Grab nginx-${{ matrix.nginx_version }} cache
      uses: actions/cache@v2
      id: cache-nginx
      with:
        path: nginx-${{ matrix.nginx_version }}
        key: nginx-${{ matrix.nginx_version }}    
    - name: Download nginx
      if: steps.cache-nginx.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}
        wget https://nginx.org/download/nginx-${{ matrix.nginx_version }}.tar.gz
        tar -xzvf nginx-${{ matrix.nginx_version }}.tar.gz

    # Grab nginx-vod-module source, from cache if possible, or from web
    - name: Grab nginx-vod-module-${{ env.module_version }} cache
      uses: actions/cache@v2
      id: cache-nginx-vod-module
      with:
        path: nginx-vod-module-${{ env.module_version }}
        key: nginx-vod-module-${{ env.module_version }}   
    - name: Download nginx-vod-module
      if: steps.cache-nginx-vod-module.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}
        wget https://github.com/kaltura/nginx-vod-module/archive/refs/tags/${{ env.module_version }}.tar.gz
        tar -xzvf ${{ env.module_version }}.tar.gz

    # Grab prebuilts from apt
    - name: Install dependencies with apt
      run: |
        sudo add-apt-repository universe
        sudo apt-get update
        sudo apt-get -y \
        --fix-missing install \
        build-essential \
        gcc make libpcre3-dev zlib1g-dev \
        libxml2-dev \
        libxslt-dev \
        libgd-dev \
        libgeoip-dev \
        libavcodec-dev \
        libswscale-dev \
        libavfilter-dev

    - name: Configure environment
      run: |
        export LD_LIBRARY_PATH=/usr/local/lib
        export LIBRARY_PATH=/usr/local/lib
        export C_INCLUDE_PATH=/usr/local/include

    - name: Configure compilation of dynamic module
      run: |
        cd ${{ github.workspace }}/nginx-${{ matrix.nginx_version }}
        ./configure \
        --with-compat \
        --add-dynamic-module=${{ github.workspace }}/nginx-vod-module-${{ env.module_version }}/
    - name: Compile dynamic module  
      run: |  
        cd ${{ github.workspace }}/nginx-${{ matrix.nginx_version }}
        make modules

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: nginx-vod-module-${{ env.module_version }}-nginx-${{ matrix.nginx_version }}-${{ matrix.os }}
        # A file, directory or wildcard pattern that describes what to upload
        path: |
          ${{ github.workspace }}/nginx-${{ matrix.nginx_version }}/objs/*.so
